name: Create Tag on PR Merge

on:
  push:
    branches:
      - main

env:
  HEADERS: "-H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -H 'X-GitHub-Api-Version: 2022-11-28'"

jobs:
  create_tag_on_merge:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, '[V') && contains(github.event.head_commit.message, ']')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: test
        run: |
          echo "example" | grep -q "a"
          if [ $? -eq 0 ]; then
            echo "The word contains the character 'a'."
          else
            echo "The word does not contain the character 'a'."
          fi

      - name: test2
        run: |
          echo "[V1.1.2]" | grep -q '\[V\d+\.\d+\.\d+\]'
          if [ $? -eq 0 ]; then
            echo "The word contains the character 'a'."
          else
            echo "The word does not contain the character 'a'."
          fi

      - name: Filter out '#' characters from commit message
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          # echo
          echo "Commit message: $commit_message"

          filtered_message=$(echo "$commit_message" | sed 's/\].*/\]/' | tr -d '#')
          # echo
          echo "Filered message: $filtered_message"

          echo "[V1.1.2]" | grep -Eq '\[V\d+\.\d+\.\d+\]'

          # commit_message_matches=$(echo "$filtered_message" | grep -Eq '\[V\d+\.\d+\.\d+\]')
          # echo
          # echo "Commit messae mathes: $commit_message_matches"

          echo $?

          if [ $? -eq 0 ]; then
            echo "Commit message matches the pattern.."
          else
            echo "Commit message does not match the pattern."
            exit 1
          fi

      - name: Get data
        run: |
          # echo head_commit
          echo ${{ github.event.head_commit }}

          # echo head_commit.message
          echo ${{ github.event.head_commit.message }}

          # check if commit message starts with [V
          if [[ ${{ github.event.head_commit.message }} == '[V'* ]]; then
            echo "Commit message starts with [V"
          else
            echo "Commit message does not start with [V"
          fi

          # check if commit message ends with ]
          if [[ ${{ github.event.head_commit.message }} == *']' ]]; then
            echo "Commit message ends with ]"
          else
            echo "Commit message does not end with ]"
          fi

      # - name: Extract PR title and branch
      #   id: get_pr_details
      #   run: |
      #     title="${{ github.event.pull_request.title }}"
      #     echo "TAG_NAME=${title//[\[\]]/}" >> $GITHUB_ENV
      #     echo "PR_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      # - name: Create Tag
      #   id: create_tag
      #   run: |
      #     tag_name="${{ env.TAG_NAME }}"
      #     git tag "${tag_name}" "${GITHUB_SHA}"

      # - name: Push Tag to Origin
      #   if: env.TAG_NAME != ''
      #   run: |
      #     git push origin "${{ env.TAG_NAME }}"

      # - name: Get Changelog Changes
      #   id: get_changelog_changes
      #   run: |
      #     # Fetch PR changes in the `CHANGELOG.md` file

      #     # echo repository_owner
      #     echo ${{ github.repository_owner }}

      #     # echo repository_name
      #     echo ${{ github.event.repository.name }}

      #     # echo PR_BRANCH
      #     echo ${{ env.PR_BRANCH }}

      #     url="https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/compare/main...${{ env.PR_BRANCH }}"
      #     # echo url
      #     echo $url

      #     # echo curl
      #     response=$(curl -s $url ${{ env.HEADERS }})

      #     # echo response
      #     echo $response

      #     # get CHANGELOG.md patch
      #     patch = $(echo $response | jq '.files | map(select(.filename == "CHANGELOG.md")) | .[0].patch')

      #     # echo patch
      #     echo $patch
