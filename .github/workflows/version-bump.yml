name: Create Pull Request with User-Specified Version Bump

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for the bump (e.g., "1.2.3")'
        required: true

jobs:
  version_bump_and_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Update and format package.json with the specified version
      - name: Update package.json
        uses: jaywcjlove/github-action-package@main
        with:
          data: |
            {
              "version": "${{ inputs.version }}"
            }
      - name: Add an empty line at the end of package.json
        run: |
          echo "" >> package.json

      # Add the step to find the next valid tag
      - name: Find next valid taggg
        run: |
          # Function to check if a tag is valid
          function is_valid_tag() {
            if [[ "$1" =~ ^[Vv][0-9]+(\.[0-9]+)+$ ]]; then
              return 0 # It is a valid tag
            else
              return 1 # It is not a valid tag
            fi
          }

          # Get the last tag without abbreviating
          last_tag=$(git describe --tags --abbrev=0)

          # Get the next valid tag
          current_tag=$(git describe --tags --abbrev=0 $last_tag^)
          while ! is_valid_tag "$current_tag"; do
            current_tag=$(git describe --tags --abbrev=0 $current_tag^) # Move to the previous tag
          done

          # Print the valid tag found
          echo "Valid Tag: $current_tag"
          echo "LATEST_TAG=$current_tag" >> $GITHUB_ENV

      # Update CHANGELOG.md with the specified version and commit messages
      - name: Update CHANGELOG.md
        run: |
          # Get today's date in the format: "Year-month-day"
          today=$(date +"%Y-%m-%d")

          # Get the latest tag from the environment variable
          latest_tag="${{ env.LATEST_TAG }}"

          # Get the commit messages between the latest tag and HEAD
          commit_messages=$(git log --pretty=format:"%s" "$latest_tag"..HEAD | awk -F"(" '{print $1}')
          echo "Commit Messages: $commit_messages"

          # Format commit_messages to have a "- " before each commit message
          commit_messages=$(echo "$commit_messages" | sed 's/\[\([^]]*\)\]/- [\1]/g')

          # Construct the new content to append with today's date and formatted commit messages
          new_content="## [v${{ inputs.version }}] - $today\n\n$commit_messages"

          # Read the existing content of CHANGELOG.md
          existing_content=$(cat CHANGELOG.md)

          # Append the new content to the existing content, with an empty line between them
          echo -e "$new_content\n\n$existing_content" > CHANGELOG.md

      # Create Pull Request
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "v${{ inputs.version }}"
          title: "[V${{ inputs.version }}]"
          body: "Automated version bump to ${{ inputs.version }}"
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
      - name: Check outputs
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # Trigger the lock-branch.yml workflow after creating the pull request
      # - name: Trigger lock-branch.yml
      #   run: |
      #     curl -X POST \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       "https://api.github.com/repos/${{ github.repository }}/actions/workflows/lock-branch.yml/dispatches" \
      #       -d '{
      #         "ref": "main",
      #         "inputs": {
      #           "branch_name": "main",
      #           "lock": "true"
      #         }
      #       }'
